// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.commands;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2619.PlyBot2018.MathUtil;
import org.usfirst.frc2619.PlyBot2018.Robot;
import org.usfirst.frc2619.PlyBot2018.RobotMap;

import com.ctre.CANTalon;
import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class TurnNDegreesAbs extends Command {
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_Angle;
	private double degreeCurrent;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double degreeChange;
	private double initialYaw;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TurnNDegreesAbs(double Angle) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	m_Angle = Angle;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES\
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	initialYaw = Robot.driveTrain.getYaw();
    	SmartDashboard.putNumber("Initial Yaw", initialYaw);
    	if ((initialYaw <= 0 && m_Angle <= 0) || (initialYaw <= 0 && m_Angle <= 0)) {
    		degreeChange = m_Angle - initialYaw;
    	}
    	else if (initialYaw > 0 && m_Angle < 0) {
    		if (initialYaw - m_Angle <= 180)
        		degreeChange = m_Angle - initialYaw;
    		else
    			degreeChange = 360 + (m_Angle - initialYaw);
    	}
    	else if (initialYaw < 0 && m_Angle > 0) {
    		if (initialYaw - m_Angle <= 180)
        		degreeChange = m_Angle - initialYaw;
    		else
    			degreeChange = -360 + (m_Angle - initialYaw);
    	}
    	SmartDashboard.putNumber("Degree Change", degreeChange);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {	
    	double direction = MathUtil.calcDirection(Robot.driveTrain.getYaw(), m_Angle);
    	final double SPEED = 0.7;
    	
		double leftSpeed = 0, rightSpeed = 0;
		if (direction > 0) {
			leftSpeed = SPEED;
			rightSpeed = -1 * SPEED;
		} else {
			rightSpeed = SPEED;
			leftSpeed = -1 * SPEED;
		}
		Robot.driveTrain.run(leftSpeed, rightSpeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	final double ERROR = 5;
    	if (Math.abs(Robot.driveTrain.getYaw() - m_Angle) < ERROR)
    		return true;
    	else
    		return false;
    }


	// Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();		
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
