// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2619.PlyBot2018.MathUtil;
import org.usfirst.frc2619.PlyBot2018.Robot;

/**
 *
 */
public class TankDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	//final variables for factors at different elevator positions
	private static final double ELEVATOR_POS_THREE = 0.50;
	private static final double ELEVATOR_POS_FOUR = 0.25;
	private static final double ELEVATOR_POS_FIVE = 0.05;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TankDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	SmartDashboard.putNumber("Current Time", System.currentTimeMillis());
    	double rightSpeed, leftSpeed;
    	rightSpeed = -Robot.oi.rightJoystick.getY();
    	leftSpeed = -Robot.oi.leftJoystick.getY();
    	rightSpeed = MathUtil.adjSpeed(rightSpeed);
    	leftSpeed = MathUtil.adjSpeed(leftSpeed);
    	if (Robot.elevator.getElevatorPos() <= 2) {
    		Robot.driveTrain.run(leftSpeed, rightSpeed);
    	}
    	else if (Robot.elevator.getElevatorPos() == 3) {
    		Robot.driveTrain.run(leftSpeed * ELEVATOR_POS_THREE, rightSpeed * ELEVATOR_POS_THREE);
    	}
    	else if (Robot.elevator.getElevatorPos() == 4) {
    		Robot.driveTrain.run(leftSpeed * ELEVATOR_POS_FOUR, rightSpeed * ELEVATOR_POS_FOUR);
    	}
    	else if (Robot.elevator.getElevatorPos() == 5) {
    		Robot.driveTrain.run(leftSpeed * ELEVATOR_POS_FIVE, rightSpeed * ELEVATOR_POS_FIVE);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
