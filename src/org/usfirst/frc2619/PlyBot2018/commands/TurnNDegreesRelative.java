// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2619.PlyBot2018.MathUtil;
import org.usfirst.frc2619.PlyBot2018.Robot;

/**
 *
 */
public class TurnNDegreesRelative extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_nDegrees;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double initial;
    private double current;
    private double direction;
 

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    
 // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	initial = Robot.driveTrain.getYaw();
    	direction = MathUtil.calcDirection(initial, initial+m_nDegrees);
    }
    
    public TurnNDegreesRelative(double nDegrees) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_nDegrees = nDegrees;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	if (m_nDegrees == 360) {
    		m_nDegrees = 0;
    	}
    }


    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	current = Robot.driveTrain.getYaw();
    	direction = MathUtil.calcDirection(current, initial+m_nDegrees);
    	run();
    }
    
    private void run() {
    	final double TURNSPEED = .5;
    	double dir = 0;
    	
    	//when direction changes (different from local dir), run() again to change turning direction.
    	//prevents it from going in circles when it overshoots.
    	if (direction != dir) {
    		dir = -direction;
        	if (direction < 0) {	//turning left
        		Robot.driveTrain.run(0, TURNSPEED);
        	}
        	else	//turning right
        		Robot.driveTrain.run(TURNSPEED,  0);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	final double ERROR = 5;
    	if (initial == 0) {
    		initial = 360;
    	}
    	if (Math.abs(Math.abs(current)-Math.abs(initial)) < m_nDegrees + ERROR && Math.abs(Math.abs(current)-Math.abs(initial)) > m_nDegrees - ERROR)
    		return false;
    	else
    		return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }
    
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
