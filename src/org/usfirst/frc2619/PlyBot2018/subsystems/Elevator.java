// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.subsystems;

import org.usfirst.frc2619.PlyBot2018.Robot;
import org.usfirst.frc2619.PlyBot2018.RobotMap;
import org.usfirst.frc2619.PlyBot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.GearTooth;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private static int lastValue = 0;
	public static int pos;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX motor = RobotMap.elevatorMotor;
    private final GearTooth counter = RobotMap.elevatorCounter;
    private final WPI_TalonSRX followerMotor = RobotMap.elevatorFollowerMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isForward() {
    	return (motor.get()>0);
    }
    public void setPow(double pow) {
    	count();
    	motor.set(pow);
    }
    public void count() {
    	int diff = counter.get() - lastValue;
    	if (!isForward())
    		diff = -diff;
    	pos += diff;
    	SmartDashboard.putNumber("ElevatorPosition:", pos);
    	SmartDashboard.putNumber("DefaultCounter:", counter.get());
    	lastValue = counter.get();
    }
    public void powToTarget(int target) {
    	count();
    	if (pos >= target) {
    		setPow(-0.5);
    	}else {
    		setPow(0.5);
    	}
    }
    public boolean isPastTarget(int target) {
    	count();
    	if ((motor.get()==0)) {
    		return false;
    	}else if (isForward()) {
    		return (pos>=target);
    	}else {
    		return (pos<=target-1);
    	}
    }
    public void resetPosBottom() {
    	pos = 0;
    	counter.reset();
    	lastValue = 0;
    }
    
    public void resetPosTop() {
    	pos = 4;
    	counter.reset();
    	lastValue = 0;
    }
    public void reset() {
    	counter.reset();
    	pos = 0;
    	lastValue = 0;
    }
    public void checkLimitSwitches() {
    	if (false) {
    		resetPosTop();
    	}else if (false)  {
    		resetPosBottom();
    	}
    }
}

