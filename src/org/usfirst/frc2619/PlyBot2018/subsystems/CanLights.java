// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.subsystems;

import org.usfirst.frc2619.PlyBot2018.RobotMap;
import org.usfirst.frc2619.PlyBot2018.commands.*;
import com.mindsensors.CANLight;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class CanLights extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	CANLight cANLight = new CANLight(3);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void lightSet(int r, int g, int b) {
    	cANLight.showRGB(r, g, b);
    }
    
    public void lightBlink(int r1, int g1, int b1, int r2, int g2, int b2, double time) {
    	cANLight.writeRegister(0, time, r1, g1, b1);
    	cANLight.writeRegister(1, time, r2, g2, b2);
    	cANLight.cycle(0, 1);
    }
    public void lightFade(int r1, int g1, int b1, int r2, int g2, int b2, double time) {
    	cANLight.writeRegister(0, time, r1, g1, b1);
    	cANLight.writeRegister(1, time, r2, g2, b2);
    	cANLight.fade(0, 1);
    }
    
    public boolean isAllianceBlue() {
    	return (DriverStation.getInstance().getAlliance()==DriverStation.Alliance.Blue);
    }
    
    public boolean isAllianceRed() {
    	return (DriverStation.getInstance().getAlliance()==DriverStation.Alliance.Red);
    }
    
    public void setAlianceColor() {
    	if (isAllianceBlue()) {
    		lightSet(0, 0, 255);
    	}else if (isAllianceRed()) {
    		lightSet(255, 0, 0);
    	}else {
    		lightSet(0,255,0);
    	}
    }
    
    public void blinkAlianceColor() {
    	if (isAllianceBlue()) {
    		lightBlink(0, 0, 255, 0, 0, 0, 0.2);
    	}else if (isAllianceRed()) {
    		lightBlink(255, 0, 0, 0, 0, 0, 0.2);
    	}else {
    		lightBlink(0, 255, 0, 0, 0, 0, 0.2);
    	}
    }
    
    public void fadeAlianceColor() {
    	if (isAllianceBlue()) {
    		lightFade(0, 0, 255, 0, 0, 0, 0.5);
    	}else if (isAllianceRed()) {
    		lightFade(255, 0, 0, 0, 0, 0, 0.5);
    	}else {
    		lightFade(0, 255, 0, 0, 0, 0, 0.5);
    	}
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

