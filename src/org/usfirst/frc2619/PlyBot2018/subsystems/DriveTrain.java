// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2018.subsystems;

import org.usfirst.frc2619.PlyBot2018.Robot;
import org.usfirst.frc2619.PlyBot2018.RobotMap;
import org.usfirst.frc2619.PlyBot2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    private final WPI_TalonSRX leftRearMotor = RobotMap.driveTrainLeftRearMotor;
    private final WPI_TalonSRX rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
    private final WPI_TalonSRX rightRearMotor = RobotMap.driveTrainRightRearMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final double POSITION_P = 0;
    private final double POSITION_I = 0;
    private final double POSITION_D = 0;
    private final double POSITION_F = 0;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    public void run(double leftSpeed, double rightSpeed) {
    	leftFrontMotor.set(leftSpeed);
    	rightFrontMotor.set(-rightSpeed);
    }
    
    public void stop() {
    	Robot.driveTrain.run(0, 0);
    }
    
    public void driveXFeet_PID(double distance) {
    	leftFrontMotor.selectProfileSlot(0, 0);
    	leftFrontMotor.selectProfileSlot(0, 0);
    	
    	leftFrontMotor.config_kP(1, POSITION_P, RobotMap.TIMEOUT_MS);
    	leftFrontMotor.config_kI(1, POSITION_I, RobotMap.TIMEOUT_MS);
    	leftFrontMotor.config_kD(1, POSITION_D, RobotMap.TIMEOUT_MS);
    	leftFrontMotor.config_kF(1, POSITION_F, RobotMap.TIMEOUT_MS);
    	
    	leftFrontMotor.set(leftFrontMotor.getControlMode().Position, distance);
    	rightFrontMotor.set(rightFrontMotor.getControlMode().Position, distance); 
    }
    
    public int getEncoderPosition() {
    	return leftFrontMotor.getSensorCollection().getQuadraturePosition();
    }
    
    public void setEncoderPosition(int value) {
    	leftFrontMotor.getSensorCollection().setQuadraturePosition(value, 10);
    }
    
    public boolean isAtTarget(double ticks) {
    	return (getEncoderPosition() > ticks);
    }

}

